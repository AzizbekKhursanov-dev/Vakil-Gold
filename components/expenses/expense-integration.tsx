"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { formatCurrency } from "@/lib/utils/currency"
import { Link2, Package, CreditCard, TrendingUp, AlertCircle, CheckCircle } from "lucide-react"
import { addDoc, collection, updateDoc, doc } from "firebase/firestore"
import { db } from "@/lib/config/firebase"
import { useToast } from "@/hooks/use-toast"

interface ExpenseIntegrationProps {
  expenses: any[]
  items: any[]
  supplierTransactions: any[]
  branches: any[]
}

export function ExpenseIntegration({ expenses, items, supplierTransactions, branches }: ExpenseIntegrationProps) {
  const { toast } = useToast()
  const [autoGenerating, setAutoGenerating] = useState(false)
  const [integrationStats, setIntegrationStats] = useState({
    connectedExpenses: 0,
    unconnectedSupplierPayments: 0,
    unconnectedItemPurchases: 0,
    autoGeneratedExpenses: 0,
  })

  useEffect(() => {
    calculateIntegrationStats()
  }, [expenses, items, supplierTransactions])

  const calculateIntegrationStats = () => {
    const connectedExpenses = expenses.filter((e) => e.connectedToSupplierPayment || e.connectedToItemPurchase).length

    const unconnectedSupplierPayments = supplierTransactions.filter(
      (st) => !expenses.some((e) => e.relatedSupplierTransactionId === st.id),
    ).length

    const unconnectedItemPurchases = items.filter(
      (item) => item.status !== "available" && !expenses.some((e) => e.relatedItemIds?.includes(item.id)),
    ).length

    const autoGeneratedExpenses = expenses.filter((e) => e.autoGenerated).length

    setIntegrationStats({
      connectedExpenses,
      unconnectedSupplierPayments,
      unconnectedItemPurchases,
      autoGeneratedExpenses,
    })
  }

  const generateExpensesFromSupplierPayments = async () => {
    setAutoGenerating(true)
    try {
      let generated = 0

      for (const transaction of supplierTransactions) {
        // Check if expense already exists for this transaction
        const existingExpense = expenses.find((e) => e.relatedSupplierTransactionId === transaction.id)
        if (existingExpense) continue

        const expenseData = {
          category: "Ta'minotchi to'lovlari",
          subcategory: "Mahsulot xaridi",
          amount: transaction.totalAmount,
          description: `${transaction.supplierName}ga to'lov - ${transaction.itemIds?.length || 0} ta mahsulot`,
          date: transaction.paymentDate || transaction.transactionDate,
          paymentMethod: "Bank o'tkazmasi",
          reference: transaction.reference || `ST-${transaction.id.slice(-6)}`,
          status: "paid",
          priority: "medium",
          approvalLevel: 3,
          autoGenerated: true,
          sourceType: "supplier_payment",
          relatedSupplierTransactionId: transaction.id,
          relatedItemIds: transaction.itemIds || [],
          connectedToSupplierPayment: true,
          createdBy: "system",
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          notes: `Avtomatik yaratilgan - Ta'minotchi: ${transaction.supplierName}, Lom narxi: ${formatCurrency(transaction.payedLomNarxi)}/g`,
        }

        await addDoc(collection(db, "expenses"), expenseData)
        generated++
      }

      toast({
        title: "Avtomatik xarajatlar yaratildi",
        description: `${generated} ta xarajat ta'minotchi to'lovlaridan yaratildi`,
      })
    } catch (error) {
      console.error("Error generating expenses:", error)
      toast({
        title: "Xatolik",
        description: "Avtomatik xarajatlar yaratishda xatolik yuz berdi",
        variant: "destructive",
      })
    } finally {
      setAutoGenerating(false)
    }
  }

  const generateExpensesFromItemPurchases = async () => {
    setAutoGenerating(true)
    try {
      let generated = 0

      // Group items by supplier and purchase date
      const itemGroups: Record<string, any[]> = {}

      items.forEach((item) => {
        if (item.supplierName && item.purchaseDate) {
          const key = `${item.supplierName}-${item.purchaseDate}`
          if (!itemGroups[key]) {
            itemGroups[key] = []
          }
          itemGroups[key].push(item)
        }
      })

      for (const [key, groupItems] of Object.entries(itemGroups)) {
        // Check if expense already exists for these items
        const hasExistingExpense = expenses.some((e) =>
          e.relatedItemIds?.some((itemId: string) => groupItems.some((item) => item.id === itemId)),
        )
        if (hasExistingExpense) continue

        const totalAmount = groupItems.reduce((sum, item) => sum + item.weight * item.lomNarxi, 0)
        const supplierName = groupItems[0].supplierName
        const purchaseDate = groupItems[0].purchaseDate

        const expenseData = {
          category: "Mahsulot xaridi",
          subcategory: "Tilla mahsulotlari",
          amount: totalAmount,
          description: `${supplierName}dan mahsulot xaridi - ${groupItems.length} ta mahsulot`,
          date: purchaseDate,
          paymentMethod: "Bank o'tkazmasi",
          reference: `IP-${Date.now().toString().slice(-6)}`,
          status: "pending",
          priority: "medium",
          approvalLevel: 0,
          autoGenerated: true,
          sourceType: "item_purchase",
          relatedItemIds: groupItems.map((item) => item.id),
          connectedToItemPurchase: true,
          createdBy: "system",
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          notes: `Avtomatik yaratilgan - ${groupItems.length} ta mahsulot, Jami og'irlik: ${groupItems.reduce((sum, item) => sum + item.weight, 0).toFixed(2)}g`,
        }

        await addDoc(collection(db, "expenses"), expenseData)
        generated++
      }

      toast({
        title: "Avtomatik xarajatlar yaratildi",
        description: `${generated} ta xarajat mahsulot xaridlaridan yaratildi`,
      })
    } catch (error) {
      console.error("Error generating expenses:", error)
      toast({
        title: "Xatolik",
        description: "Avtomatik xarajatlar yaratishda xatolik yuz berdi",
        variant: "destructive",
      })
    } finally {
      setAutoGenerating(false)
    }
  }

  const linkExpenseToTransaction = async (expenseId: string, transactionId: string) => {
    try {
      await updateDoc(doc(db, "expenses", expenseId), {
        relatedSupplierTransactionId: transactionId,
        connectedToSupplierPayment: true,
        updatedAt: new Date().toISOString(),
      })

      toast({
        title: "Bog'landi",
        description: "Xarajat ta'minotchi tranzaksiyasiga bog'landi",
      })
    } catch (error) {
      console.error("Error linking expense:", error)
      toast({
        title: "Xatolik",
        description: "Bog'lashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  return (
    <div className="space-y-6">
      {/* Integration Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Bog'langan xarajatlar</CardTitle>
            <Link2 className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{integrationStats.connectedExpenses}</div>
            <p className="text-xs text-muted-foreground">Integratsiya qilingan</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Bog'lanmagan to'lovlar</CardTitle>
            <CreditCard className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{integrationStats.unconnectedSupplierPayments}</div>
            <p className="text-xs text-muted-foreground">Ta'minotchi to'lovlari</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Bog'lanmagan xaridlar</CardTitle>
            <Package className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{integrationStats.unconnectedItemPurchases}</div>
            <p className="text-xs text-muted-foreground">Mahsulot xaridlari</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avtomatik yaratilgan</CardTitle>
            <TrendingUp className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{integrationStats.autoGeneratedExpenses}</div>
            <p className="text-xs text-muted-foreground">Tizim yaratgan</p>
          </CardContent>
        </Card>
      </div>

      {/* Auto-generation Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            Avtomatik xarajat yaratish
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="border rounded-lg p-4 space-y-3">
              <div className="flex items-center gap-2">
                <CreditCard className="h-5 w-5 text-orange-600" />
                <h3 className="font-medium">Ta'minotchi to'lovlaridan</h3>
              </div>
              <p className="text-sm text-muted-foreground">
                Ta'minotchilarga qilingan to'lovlardan avtomatik xarajat yozuvlari yaratish
              </p>
              <div className="flex items-center justify-between">
                <Badge variant="outline">{integrationStats.unconnectedSupplierPayments} ta bog'lanmagan</Badge>
                <Button
                  onClick={generateExpensesFromSupplierPayments}
                  disabled={autoGenerating || integrationStats.unconnectedSupplierPayments === 0}
                  size="sm"
                >
                  {autoGenerating ? "Yaratilmoqda..." : "Avtomatik yaratish"}
                </Button>
              </div>
            </div>

            <div className="border rounded-lg p-4 space-y-3">
              <div className="flex items-center gap-2">
                <Package className="h-5 w-5 text-red-600" />
                <h3 className="font-medium">Mahsulot xaridlaridan</h3>
              </div>
              <p className="text-sm text-muted-foreground">
                Mahsulot xaridlaridan avtomatik xarajat yozuvlari yaratish
              </p>
              <div className="flex items-center justify-between">
                <Badge variant="outline">{integrationStats.unconnectedItemPurchases} ta bog'lanmagan</Badge>
                <Button
                  onClick={generateExpensesFromItemPurchases}
                  disabled={autoGenerating || integrationStats.unconnectedItemPurchases === 0}
                  size="sm"
                >
                  {autoGenerating ? "Yaratilmoqda..." : "Avtomatik yaratish"}
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Connected Expenses */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Bog'langan xarajatlar
          </CardTitle>
        </CardHeader>
        <CardContent>
          {expenses.filter((e) => e.connectedToSupplierPayment || e.connectedToItemPurchase).length > 0 ? (
            <div className="space-y-3">
              {expenses
                .filter((e) => e.connectedToSupplierPayment || e.connectedToItemPurchase)
                .slice(0, 10)
                .map((expense) => (
                  <div key={expense.id} className="border rounded-lg p-3 bg-green-50">
                    <div className="flex items-start justify-between">
                      <div className="space-y-1">
                        <div className="flex items-center gap-2">
                          <h3 className="font-medium">{expense.description}</h3>
                          {expense.autoGenerated && <Badge variant="outline">Avtomatik</Badge>}
                          {expense.connectedToSupplierPayment && (
                            <Badge className="bg-orange-100 text-orange-800">Ta'minotchi to'lovi</Badge>
                          )}
                          {expense.connectedToItemPurchase && (
                            <Badge className="bg-blue-100 text-blue-800">Mahsulot xaridi</Badge>
                          )}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {expense.category} • {new Date(expense.date).toLocaleDateString()}
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium">{formatCurrency(expense.amount)}</div>
                        <div className="text-xs text-muted-foreground">
                          {expense.relatedItemIds?.length || 0} ta mahsulot
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">Bog'langan xarajatlar yo'q</div>
          )}
        </CardContent>
      </Card>

      {/* Unconnected Transactions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertCircle className="h-5 w-5 text-orange-600" />
            Bog'lanmagan tranzaksiyalar
          </CardTitle>
        </CardHeader>
        <CardContent>
          {supplierTransactions.filter((st) => !expenses.some((e) => e.relatedSupplierTransactionId === st.id)).length >
          0 ? (
            <div className="space-y-3">
              {supplierTransactions
                .filter((st) => !expenses.some((e) => e.relatedSupplierTransactionId === st.id))
                .slice(0, 5)
                .map((transaction) => (
                  <div key={transaction.id} className="border rounded-lg p-3 bg-orange-50">
                    <div className="flex items-start justify-between">
                      <div className="space-y-1">
                        <h3 className="font-medium">{transaction.supplierName}ga to'lov</h3>
                        <div className="text-sm text-muted-foreground">
                          {new Date(transaction.transactionDate).toLocaleDateString()} •{" "}
                          {transaction.itemIds?.length || 0} ta mahsulot
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium text-orange-600">{formatCurrency(transaction.totalAmount)}</div>
                        <Button
                          onClick={() => linkExpenseToTransaction("", transaction.id)}
                          size="sm"
                          variant="outline"
                        >
                          Bog'lash
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">Bog'lanmagan tranzaksiyalar yo'q</div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
